// <auto-generated />
using System;
using Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core_Api.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Data.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38209f7c-c1c8-4f9c-a528-8968d92cd3fc"),
                            Balance = 1000000000,
                            ClientId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Currency = 0,
                            IsClosed = false,
                            Name = "Банковский Рублевый"
                        },
                        new
                        {
                            Id = new Guid("707e33f3-08d9-4a6b-aaee-5775871d3e10"),
                            Balance = 10000000,
                            ClientId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Currency = 1,
                            IsClosed = false,
                            Name = "Банковский Долларовый"
                        },
                        new
                        {
                            Id = new Guid("e57994f6-faf1-427b-9066-37a8986fd309"),
                            Balance = 10000000,
                            ClientId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Currency = 2,
                            IsClosed = false,
                            Name = "Банковский Евровый"
                        });
                });

            modelBuilder.Entity("Core.Data.Models.Client", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6e9e5d77-d218-49aa-80a9-3a1f0dba62db")
                        });
                });

            modelBuilder.Entity("Core.Data.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("OperationCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("OperationType")
                        .HasColumnType("integer");

                    b.Property<Guid>("TargetAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("Operations");

                    b.HasDiscriminator<int>("OperationCategory");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core_Api.Data.Models.CurrencyCourse", b =>
                {
                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<int>("Course")
                        .HasColumnType("integer");

                    b.HasKey("Currency");

                    b.ToTable("CurrencyCourses");
                });

            modelBuilder.Entity("Core.Data.Models.CashOperation", b =>
                {
                    b.HasBaseType("Core.Data.Models.Operation");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Core.Data.Models.CreditOperation", b =>
                {
                    b.HasBaseType("Core.Data.Models.Operation");

                    b.Property<Guid>("CreditId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Core.Data.Models.TransferOperation", b =>
                {
                    b.HasBaseType("Core.Data.Models.Operation");

                    b.Property<int>("ConvertedAmount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SenderAccountId")
                        .HasColumnType("uuid");

                    b.HasIndex("SenderAccountId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Core.Data.Models.Account", b =>
                {
                    b.HasOne("Core.Data.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Data.Models.Operation", b =>
                {
                    b.HasOne("Core.Data.Models.Account", "TargetAccount")
                        .WithMany()
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Core.Data.Models.TransferOperation", b =>
                {
                    b.HasOne("Core.Data.Models.Account", "SenderAccount")
                        .WithMany()
                        .HasForeignKey("SenderAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SenderAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
